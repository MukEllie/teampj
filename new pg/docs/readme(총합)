# River Dice 게임 포털 완전 아키텍처 문서

## 프로젝트 개요

### 시스템 정보
- **프로젝트명**: River Dice 게임 포털
- **위치**: `new pg/` 폴더
- **아키텍처**: Full-Stack 웹 애플리케이션
- **프론트엔드**: Vanilla JavaScript (ES6+) + HTML5 + CSS3
- **백엔드**: Node.js + Express.js
- **데이터베이스**: MySQL
- **목적**: React 게임 통합 포털 및 커뮤니티 플랫폼

### 핵심 특징
- **게임 통합**: React 게임 임베딩 시스템
- **사용자 관리**: 회원가입/로그인/프로필 시스템
- **가챠 시스템**: 다중 가챠 타입 및 확률 시스템
- **커뮤니티**: 게시판, 댓글, 좋아요 시스템
- **미디어 관리**: 파일 업로드, YouTube/Vimeo 지원
- **고객 지원**: FAQ, 문의사항, 실시간 채팅
- **관리자 패널**: 완전한 백오피스 시스템

## 시스템 아키텍처

### 실제 폴더 구조
```
new pg/
├── card-battle-battle/       # React 게임 모듈
├── docs/                     # 문서 파일들
├── node_modules/             # npm 의존성
├── uploads/                  # 업로드 파일 저장소
│   └── media/               # 미디어 파일
├── 
├── HTML 페이지들
│   ├── admin.html           # 관리자 패널
│   ├── community.html       # 커뮤니티
│   ├── customer-service.html # 고객센터
│   ├── gacha-shop.html      # 가챠 상점
│   ├── game-info.html       # 게임 정보
│   ├── game.html            # 게임 실행
│   ├── index.html           # 메인 홈페이지
│   ├── login.html           # 로그인
│   ├── media.html           # 미디어 갤러리
│   ├── news.html            # 공지사항
│   ├── profile.html         # 사용자 프로필
│   └── signup.html          # 회원가입
│
├── JavaScript 모듈들
│   ├── admin.js             # 관리자 시스템 (1,800줄)
│   ├── common-auth.js       # 공통 인증 시스템
│   ├── community.js         # 커뮤니티 기능
│   ├── customer-service.js  # 고객센터 기능
│   └── media.js            # 미디어 관리 (1,800줄)
│
├── 설정 및 의존성
│   ├── .env                # 환경 변수
│   ├── package.json        # npm 설정
│   ├── package-lock.json   # 의존성 잠금
│   ├── server.js           # Express 서버
│   └── styles.css          # 통합 스타일시트
```

### 기술 스택

#### 프론트엔드
```javascript
// 핵심 기술
- HTML5: 시맨틱 마크업, 웹 표준
- CSS3: Flexbox, Grid, 애니메이션, 반응형
- JavaScript ES6+: 클래스, async/await, 모듈화

// 주요 특징
- Vanilla JavaScript (라이브러리 의존성 없음)
- 클래스 기반 아키텍처
- 모듈화된 구조
- 반응형 웹 디자인

// 브라우저 지원
- Chrome 60+, Firefox 55+, Safari 11+, Edge 79+
```

#### 백엔드
```javascript
// 서버 환경
- Node.js: 런타임 환경
- Express.js: 웹 프레임워크
- MySQL2: 데이터베이스 드라이버

// 보안 및 유틸리티
- bcrypt: 비밀번호 해싱 (saltRounds: 10)
- cors: CORS 정책 관리
- multer: 파일 업로드 처리
- dotenv: 환경변수 관리

// 의존성 (package.json)
{
  "dependencies": {
    "express": "^4.x.x",
    "mysql2": "^3.x.x",
    "bcrypt": "^5.x.x",
    "cors": "^2.x.x",
    "multer": "^1.x.x",
    "dotenv": "^16.x.x"
  }
}
```

#### 데이터베이스
```sql
-- 데이터베이스: MySQL (testgame)
-- 주요 테이블: 15개
-- 관계: 외래키 기반 정규화
-- 특징: 트랜잭션 지원, 인덱싱 최적화
```

## 상세 시스템 분석

### 1. 인증 시스템 (common-auth.js)

#### 핵심 기능
```javascript
// 주요 함수
- updateAuthButtons()      // 헤더 인증 버튼 동적 업데이트
- getCurrentUser()         // 현재 로그인 사용자 정보 반환
- requireLogin()           // 로그인 필수 페이지 보호
- onLoginSuccess()         // 로그인 성공 시 처리
- logout()                 // 로그아웃 처리

// 세션 관리
- localStorage 기반 사용자 정보 저장
- 멀티탭 동기화 (storage 이벤트)
- 자동 로그인 상태 확인

// 보안 기능
- XSS 방지를 위한 입력값 검증
- 세션 만료 처리
- 안전한 로그아웃 프로세스
```

#### 인증 흐름
```mermaid
graph TD
    A[페이지 로드] --> B[getCurrentUser()]
    B --> C{로그인 상태?}
    C -->|예| D[updateAuthButtons() - 로그아웃 버튼]
    C -->|아니오| E[updateAuthButtons() - 로그인 버튼]
    F[로그인 성공] --> G[localStorage 저장]
    G --> H[멀티탭 동기화]
    H --> I[페이지 리다이렉트]
```

### 2. 게임 통합 시스템 (game.html)

#### React 게임 임베딩
```javascript
// 게임 로딩 시스템
- iframe을 통한 React 앱 임베딩
- 자동 로딩 관리 및 에러 처리
- 5초 타임아웃 시스템
- 최대 3회 자동 재시도
- 개발 서버 연결 상태 확인

// 게임 서버 설정
gameFrame.src = "http://localhost:3000"; // React 개발 서버
```

#### 에러 처리 메커니즘
```javascript
// 로딩 실패 시 처리
1. 5초 로딩 타임아웃
2. 재시도 카운터 (최대 3회)
3. 에러 메시지 표시
4. 수동 새로고침 버튼 제공
5. 개발자 도구 안내
```

### 3. 가챠 시스템 (gacha-shop.html)

#### 가챠 카테고리
```javascript
// 캐릭터 가챠
- 픽업 이벤트 시스템
- 확률 업 이벤트
- 신규 캐릭터 우선 노출

// 무기 가챠
- 신화급 장비 시스템
- 강화 재료 포함
- 세트 아이템 확률

// 특별 가챠
- 한정 이벤트 전용
- 시간 제한 시스템
- 특별 확률 테이블
```

#### 확률 시스템
```javascript
const probabilities = {
  legendary: 1.5,    // 전설급 (5성)
  epic: 8.5,         // 영웅급 (4성)
  rare: 40,          // 희귀급 (3성)
  common: 50         // 일반급 (2성)
};

// 픽업 이벤트 시 전설급 확률 3%로 증가
// 천장 시스템: 90회 뽑기 시 전설급 확정
```

### 4. 커뮤니티 시스템 (community.html + community.js)

#### 게시판 구조
```javascript
// 카테고리 시스템
- 인기: 좋아요/조회수 기준 자동 선별
- 자유: 일반 게시판
- 질문: Q&A 형식
- 공략: 게임 가이드
- 창작: 사용자 창작물
- 건의: 개선사항 건의

// 게시글 기능
- 작성/수정/삭제 (권한 기반)
- 좋아요 시스템
- 댓글 시스템
- 조회수 자동 증가
- HOT 게시글 자동 표시
```

#### 실시간 기능
```javascript
// 실시간 채팅
- 사이드바 채팅 시스템
- 로그인 사용자만 참여
- 자동 스크롤
- 메시지 필터링

// 실시간 업데이트
- 새 게시글 알림
- 댓글 실시간 표시
- 좋아요 수 실시간 반영
```

### 5. 미디어 시스템 (media.html + media.js)

#### MediaManager 클래스 (58개 메서드)
```javascript
class MediaManager {
  // 초기화 메서드
  init(), getCurrentUser(), initializeAuth()
  
  // 데이터 로딩 (4개)
  loadCategories(), loadMediaItems(), loadUserMediaItems(), loadMoreItems()
  
  // 렌더링 시스템 (4개)
  renderMediaItems(), createMediaElement(), renderMyMedia(), createMyMediaElement()
  
  // 업로드 시스템 (6개)
  showUploadModal(), setupUploadModal(), handleFileSelect(), 
  validateFile(), uploadMediaFile(), uploadMediaUrl()
  
  // 상호작용 (5개)
  toggleLike(), downloadMedia(), shareMedia(), incrementViews(), incrementDownloads()
  
  // 개인 미디어 관리 (5개)
  showMyMedia(), editMedia(), updateMedia(), deleteMedia(), performDelete()
  
  // 기타 34개 메서드...
}
```

#### 지원 미디어 타입
```javascript
// 파일 업로드
- 이미지: JPEG, JPG, PNG, GIF
- 동영상: MP4, WebM, MOV
- 최대 크기: 50MB

// URL 업로드
- YouTube: 자동 embed 변환
- Vimeo: 자동 embed 변환
- 직접 링크: 일반 미디어 파일
```

### 6. 고객 지원 시스템 (customer-service.html + customer-service.js)

#### 지원 카테고리
```javascript
// FAQ 시스템
- 카테고리별 분류 (gameplay, account, bug, general, payment)
- 조회수 기반 정렬
- 아코디언 형태 UI
- 실시간 조회수 업데이트

// 문의 시스템
- 문의 유형별 템플릿 자동완성
- 첨부파일 지원 준비
- 상태별 추적 시스템
- 이메일 알림 연동
```

#### 실시간 채팅
```javascript
// 상담원 연결 시뮬레이션
- 모달 기반 채팅 인터페이스
- 2초 후 자동 상담원 연결
- 자동 응답 시스템
- 메시지 타임스탬프
```

### 7. 관리자 시스템 (admin.html + admin.js)

#### AdminManager 클래스 구조
```javascript
// 핵심 클래스들
- AdminUtils: 유틸리티 함수 모음 (11개 메서드)
- AdminAPI: API 통신 레이어 (재시도 로직 포함)
- AdminManager: 메인 관리 시스템 (중앙 제어)

// 주요 관리 기능
1. 사용자 관리: 정보 수정, 삭제, 게임 데이터 관리
2. 게시글 관리: 수정, 삭제, 카테고리 관리
3. 댓글 관리: 삭제, 검색, 원글 정보 표시
4. 미디어 관리: 파일 정보 수정, 공개/비공개 설정
5. 뉴스 관리: 작성, 수정, 삭제, 중요 공지 설정
6. 문의 관리: 상태 변경, 답변 작성
7. FAQ 관리: 작성, 수정, 활성/비활성 설정
8. 게임 데이터: 캐릭터, 몬스터, 스킬 관리
```

#### 대시보드 통계
```javascript
// 실시간 통계 표시
- 총 회원수, 게시글, 댓글
- 미디어 파일, 뉴스/공지
- 문의사항, 대기 중 문의, FAQ
```

### 8. 백엔드 서버 (server.js)

#### API 엔드포인트 구조
```javascript
// 인증 관련
POST /api/login              // 사용자 로그인
POST /api/signup             // 회원가입
POST /api/check-id           // 아이디 중복 확인
POST /api/check-nickname     // 닉네임 중복 확인

// 관리자 전용 (admin_id='admin', admin_password='1234')
POST /api/admin/login        // 관리자 로그인
GET  /api/admin/stats        // 통계 데이터
GET  /api/admin/users        // 사용자 관리
PUT  /api/admin/users/:id    // 사용자 수정
DELETE /api/admin/users/:id  // 사용자 삭제

// 커뮤니티
GET  /api/posts              // 게시글 목록 (페이징)
POST /api/posts              // 게시글 작성
GET  /api/posts/:id          // 특정 게시글 조회
POST /api/posts/:id/like     // 좋아요 토글
GET  /api/posts/:id/comments // 댓글 목록
POST /api/posts/:id/comments // 댓글 작성

// 미디어
GET  /api/media/categories   // 카테고리 목록
GET  /api/media/items        // 미디어 목록
POST /api/media/upload       // 파일 업로드
POST /api/media/upload-url   // URL 업로드
GET  /api/media/download/:id // 다운로드

// 고객 지원
GET  /api/faq                // FAQ 목록
POST /api/faq/:id/view       // FAQ 조회수 증가
POST /api/inquiries          // 문의 등록
GET  /api/inquiries/user/:id // 사용자 문의 내역
```

#### 파일 업로드 시스템
```javascript
// Multer 설정
- 저장 경로: uploads/media/
- 파일명 규칙: timestamp_originalname
- 크기 제한: 50MB
- 지원 타입: 이미지, 동영상

// 에러 처리
- 파일 크기 초과
- 지원하지 않는 파일 타입
- 업로드 실패 시 자동 정리
```

## 데이터베이스 스키마

### 사용자 관련 테이블
```sql
-- UserDB: 사용자 기본 정보
CREATE TABLE UserDB (
  ID VARCHAR(255) PRIMARY KEY,
  nickname VARCHAR(100) NOT NULL,
  email VARCHAR(255) UNIQUE NOT NULL,
  Password VARCHAR(255) NOT NULL,  -- bcrypt 해싱
  birth_date DATE,
  gender ENUM('male', 'female'),
  gold INT DEFAULT 10000,
  Owned_SkinID JSON,  -- 보유 스킨 배열
  join_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- PlayerDB: 게임 데이터
CREATE TABLE PlayerDB (
  Player_ID VARCHAR(255) PRIMARY KEY,
  Using_Character VARCHAR(100),
  curr_hp INT,
  max_hp INT,
  atk INT,
  luck INT,
  WhereSession VARCHAR(100),
  WhereStage INT,
  FOREIGN KEY (Player_ID) REFERENCES UserDB(ID) ON DELETE CASCADE
);
```

### 커뮤니티 테이블
```sql
-- Posts: 게시글
CREATE TABLE Posts (
  post_id INT AUTO_INCREMENT PRIMARY KEY,
  user_id VARCHAR(255),
  title VARCHAR(200) NOT NULL,
  content TEXT NOT NULL,
  category VARCHAR(50),
  views INT DEFAULT 0,
  likes INT DEFAULT 0,
  comment_count INT DEFAULT 0,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES UserDB(ID)
);

-- Comments: 댓글
CREATE TABLE Comments (
  comment_id INT AUTO_INCREMENT PRIMARY KEY,
  post_id INT,
  user_id VARCHAR(255),
  content TEXT NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE,
  FOREIGN KEY (user_id) REFERENCES UserDB(ID)
);

-- PostLikes: 게시글 좋아요
CREATE TABLE PostLikes (
  user_id VARCHAR(255),
  post_id INT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (user_id, post_id)
);
```

### 미디어 테이블
```sql
-- MediaItems: 미디어 파일 정보
CREATE TABLE MediaItems (
  media_id INT AUTO_INCREMENT PRIMARY KEY,
  title VARCHAR(200) NOT NULL,
  description TEXT,
  file_name VARCHAR(255),
  file_url VARCHAR(500),
  file_type VARCHAR(50),
  mime_type VARCHAR(100),
  file_size BIGINT,
  category_id INT,
  uploaded_by VARCHAR(255),
  upload_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  views INT DEFAULT 0,
  likes INT DEFAULT 0,
  downloads INT DEFAULT 0,
  tags JSON,
  FOREIGN KEY (uploaded_by) REFERENCES UserDB(ID)
);

-- MediaCategories: 미디어 카테고리
CREATE TABLE MediaCategories (
  category_id INT AUTO_INCREMENT PRIMARY KEY,
  category_code VARCHAR(50) UNIQUE,
  category_name VARCHAR(100),
  sort_order INT DEFAULT 0
);
```

### 게임 데이터 테이블
```sql
-- CharacterDB: 캐릭터 정보
CREATE TABLE CharacterDB (
  name VARCHAR(100) PRIMARY KEY,
  hp INT,
  atk INT,
  luck INT
);

-- MonsterDB: 몬스터 정보
CREATE TABLE MonsterDB (
  MonsterID INT AUTO_INCREMENT PRIMARY KEY,
  Name VARCHAR(100),
  Session VARCHAR(50),
  Type VARCHAR(50),
  Element VARCHAR(50),
  min_hp INT,
  max_hp INT,
  min_atk INT,
  max_atk INT,
  luck INT,
  Special TEXT,
  Description TEXT
);

-- SkillDB: 스킬 정보
CREATE TABLE SkillDB (
  SkillID VARCHAR(100) PRIMARY KEY,
  skill_Job VARCHAR(50),
  skill_Type VARCHAR(50),
  rarity VARCHAR(50),
  element VARCHAR(50),
  min_damage INT,
  max_damage INT,
  hit_time INT,
  target VARCHAR(50),
  statusEffectName VARCHAR(50),
  statusEffectRate INT,
  statusEffectTurn INT
);
```

## CSS 스타일 시스템 (styles.css)

### 색상 시스템
```css
:root {
  --primary-color: #667eea;      /* 메인 컬러 */
  --secondary-color: #764ba2;    /* 보조 컬러 */
  --accent-color: #f093fb;       /* 강조 컬러 */
  --background-color: #f8f9fa;   /* 배경 컬러 */
  --text-color: #333;            /* 텍스트 컬러 */
  --border-color: #dee2e6;       /* 테두리 컬러 */
}

/* 그라디언트 시스템 */
.gradient-primary { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
.gradient-warning { background: linear-gradient(45deg, #ff6b6b, #ee5a24); }
.gradient-gacha { background: linear-gradient(135deg, #feca57 0%, #ff9ff3 50%, #667eea 100%); }
.gradient-media { background: linear-gradient(135deg, #ff6b6b 0%, #feca57 100%); }
.gradient-support { background: linear-gradient(135deg, #48dbfb 0%, #0abde3 100%); }
```

### 핵심 컴포넌트
```css
/* 헤더 시스템 */
.header {
  position: fixed;
  top: 0;
  width: 100%;
  backdrop-filter: blur(10px);
  z-index: 1000;
}

/* 카드 시스템 */
.feature-card {
  background: #fff;
  border-radius: 15px;
  padding: 2rem;
  box-shadow: 0 5px 20px rgba(0,0,0,.1);
  transition: transform 0.3s ease;
}

.feature-card:hover {
  transform: translateY(-5px);
}

/* 버튼 시스템 */
.btn {
  padding: .8rem 1.5rem;
  background: var(--primary-color);
  color: #fff;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.3s ease;
}

/* 모달 시스템 */
.modal {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0,0,0,0.5);
  z-index: 2000;
}

.modal.show {
  display: flex;
  align-items: center;
  justify-content: center;
}
```

### 반응형 디자인
```css
/* 데스크톱 */
@media (min-width: 1200px) {
  .feature-grid {
    grid-template-columns: repeat(4, 1fr);
  }
}

/* 태블릿 */
@media (max-width: 768px) {
  .feature-grid {
    grid-template-columns: repeat(2, 1fr);
  }
  
  .nav-menu {
    display: none;
  }
  
  .mobile-menu-toggle {
    display: block;
  }
}

/* 모바일 */
@media (max-width: 480px) {
  .feature-grid {
    grid-template-columns: 1fr;
  }
  
  .container {
    padding: 0 1rem;
  }
}
```

## 설치 및 실행

### 1. 환경 설정
```bash
# 1. Node.js 의존성 설치
cd "new pg"
npm install

# 2. MySQL 데이터베이스 생성
mysql -u root -p
CREATE DATABASE testgame;
USE testgame;
# 테이블 스키마 실행

# 3. 환경 변수 설정 (.env)
PORT=3001
DB_HOST=localhost
DB_USER=root
DB_PASSWORD=your_password
DB_NAME=testgame
```

### 2. 서버 실행
```bash
# 백엔드 서버 실행 (포트 3001)
node server.js

# React 게임 서버 실행 (포트 3000)
cd card-battle-battle
npm start

# 웹 서버 실행 (HTML 파일들)
# Live Server 또는 Python 서버 사용
python -m http.server 8000
```

### 3. 디렉토리 구조 확인
```bash
# uploads 폴더 생성 (없는 경우)
mkdir -p uploads/media

# 권한 설정 (Unix 계열)
chmod 755 uploads
chmod 755 uploads/media
```

## 주요 기능 사용법

### 1. 관리자 시스템 접근
```
URL: http://localhost:8000/admin.html
ID: admin
PW: 1234
```

### 2. 사용자 회원가입/로그인
```
회원가입: 실시간 유효성 검사
로그인: 이메일 + 비밀번호
세션: localStorage 기반 유지
```

### 3. 게임 실행
```
메인 페이지 → "게임 실행" 버튼
React 서버 자동 연결 (localhost:3000)
로딩 실패 시 3회 자동 재시도
```

### 4. 미디어 업로드
```
로그인 필요
파일 업로드: 드래그&드롭 지원
URL 업로드: YouTube/Vimeo 자동 변환
최대 크기: 50MB
```

## 보안 및 성능

### 보안 기능
```javascript
// 비밀번호 해싱
const hashedPassword = await bcrypt.hash(password, 10);

// XSS 방지
function escapeHtml(text) {
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}

// SQL Injection 방지
db.query('SELECT * FROM Users WHERE id = ?', [userId]);

// 파일 업로드 검증
const allowedTypes = ['image/jpeg', 'image/png', 'video/mp4'];
```

### 성능 최적화
```javascript
// 이미지 지연 로딩
function setupLazyLoading() {
  const images = document.querySelectorAll('img[data-src]');
  const observer = new IntersectionObserver(entries => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const img = entry.target;
        img.src = img.dataset.src;
        observer.unobserve(img);
      }
    });
  });
  images.forEach(img => observer.observe(img));
}

// 디바운싱
function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}
```

## 확장 가능성

## 확장 가능성

### 1. 실시간 기능 확장
```javascript
// Socket.io를 통한 실시간 시스템
const io = require('socket.io')(server);

// 실시간 채팅
io.on('connection', (socket) => {
  socket.join('community_chat');
  
  socket.on('chat_message', (data) => {
    io.to('community_chat').emit('new_message', {
      user: data.user,
      message: data.message,
      timestamp: new Date()
    });
  });
  
  // 실시간 알림
  socket.on('new_post', (postData) => {
    io.emit('notification', {
      type: 'new_post',
      title: postData.title,
      category: postData.category
    });
  });
});

// 실시간 게임 상태 동기화
socket.on('game_state_update', (gameData) => {
  // 플레이어 위치, HP, 골드 등 실시간 업데이트
});
```

### 2. 모바일 앱 연동 준비
```javascript
// PWA (Progressive Web App) 지원
// manifest.json
{
  "name": "River Dice Portal",
  "short_name": "RiverDice",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#667eea",
  "theme_color": "#667eea",
  "icons": [...]
}

// Service Worker 등록
if ('serviceWorker' in navigator) {
  navigator.serviceWorker.register('/sw.js');
}

// Push 알림 지원
function setupPushNotifications() {
  if ('Notification' in window) {
    Notification.requestPermission();
  }
}
```

### 3. 고급 게임 기능 확장
```javascript
// 인벤토리 시스템
CREATE TABLE PlayerInventory (
  inventory_id INT AUTO_INCREMENT PRIMARY KEY,
  player_id VARCHAR(255),
  item_type VARCHAR(50),
  item_id VARCHAR(100),
  quantity INT DEFAULT 1,
  obtained_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (player_id) REFERENCES UserDB(ID)
);

// 친구 시스템
CREATE TABLE Friendships (
  friendship_id INT AUTO_INCREMENT PRIMARY KEY,
  user_id VARCHAR(255),
  friend_id VARCHAR(255),
  status ENUM('pending', 'accepted', 'blocked'),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES UserDB(ID),
  FOREIGN KEY (friend_id) REFERENCES UserDB(ID)
);

// 길드 시스템
CREATE TABLE Guilds (
  guild_id INT AUTO_INCREMENT PRIMARY KEY,
  guild_name VARCHAR(100) UNIQUE,
  guild_master VARCHAR(255),
  description TEXT,
  level INT DEFAULT 1,
  member_count INT DEFAULT 1,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### 4. 성능 최적화 로드맵
```javascript
// Redis 캐싱 시스템
const redis = require('redis');
const client = redis.createClient();

// 자주 조회되는 데이터 캐싱
async function getCachedData(key) {
  const cached = await client.get(key);
  if (cached) return JSON.parse(cached);
  
  const data = await fetchFromDatabase();
  await client.setex(key, 3600, JSON.stringify(data)); // 1시간 캐시
  return data;
}

// 데이터베이스 커넥션 풀 최적화
const pool = mysql.createPool({
  connectionLimit: 10,
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  acquireTimeout: 60000,
  timeout: 60000,
  reconnect: true
});
```

### 5. 보안 강화 로드맵
```javascript
// JWT 토큰 기반 인증
const jwt = require('jsonwebtoken');

function generateToken(user) {
  return jwt.sign(
    { userId: user.id, email: user.email },
    process.env.JWT_SECRET,
    { expiresIn: '24h' }
  );
}

// Rate Limiting
const rateLimit = require('express-rate-limit');
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15분
  max: 100, // 최대 100회 요청
  message: '너무 많은 요청이 발생했습니다.'
});

// 입력 검증 강화
const { body, validationResult } = require('express-validator');
const xss = require('xss');

app.post('/api/posts',
  body('title').trim().isLength({ min: 1, max: 200 }).escape(),
  body('content').trim().isLength({ min: 1 }).customSanitizer(xss),
  (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    // 게시글 생성 로직
  }
);
```

### 6. 마이크로서비스 아키텍처 전환 준비
```javascript
// 서비스별 분리 구조
services/
├── user-service/          # 사용자 관리
├── game-service/          # 게임 데이터
├── community-service/     # 커뮤니티
├── media-service/         # 미디어 관리
├── notification-service/  # 알림 시스템
└── api-gateway/          # API 게이트웨이

// Docker 컨테이너화
# Dockerfile
FROM node:16-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 3001
CMD ["node", "server.js"]
```

## 운영 환경 배포 가이드

### 1. 프로덕션 환경 설정
```bash
# 환경 변수 (.env.production)
NODE_ENV=production
PORT=3001
DB_HOST=production-db-host
DB_USER=production-user
DB_PASSWORD=strong-password
DB_NAME=riverdice_production
JWT_SECRET=super-secret-jwt-key
REDIS_URL=redis://redis-server:6379
```

### 2. Nginx 리버스 프록시 설정
```nginx
server {
    listen 80;
    server_name yourdomain.com;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl;
    server_name yourdomain.com;
    
    ssl_certificate /path/to/certificate.crt;
    ssl_certificate_key /path/to/private.key;
    
    location / {
        root /var/www/riverdice;
        try_files $uri $uri/ /index.html;
    }
    
    location /api/ {
        proxy_pass http://localhost:3001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
    
    location /uploads/ {
        root /var/www/riverdice;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
}
```

### 3. PM2 프로세스 관리
```javascript
// ecosystem.config.js
module.exports = {
  apps: [{
    name: 'riverdice-server',
    script: 'server.js',
    instances: 'max',
    exec_mode: 'cluster',
    env: {
      NODE_ENV: 'development'
    },
    env_production: {
      NODE_ENV: 'production',
      PORT: 3001
    }
  }]
};

// 배포 명령어
# pm2 start ecosystem.config.js --env production
# pm2 reload riverdice-server
# pm2 monit
```

### 4. 모니터링 및 로깅
```javascript
// Winston 로거 설정
const winston = require('winston');

const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.errors({ stack: true }),
    winston.format.json()
  ),
  defaultMeta: { service: 'riverdice-server' },
  transports: [
    new winston.transports.File({ filename: 'logs/error.log', level: 'error' }),
    new winston.transports.File({ filename: 'logs/combined.log' })
  ]
});

// 성능 모니터링
const responseTime = require('response-time');
app.use(responseTime((req, res, time) => {
  logger.info(`${req.method} ${req.url} - ${time}ms`);
}));
```

### 5. 백업 및 복구 전략
```bash
#!/bin/bash
# backup.sh - 일일 백업 스크립트

DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="/backups/riverdice"

# 데이터베이스 백업
mysqldump -u $DB_USER -p$DB_PASSWORD $DB_NAME > $BACKUP_DIR/db_$DATE.sql

# 업로드 파일 백업
tar -czf $BACKUP_DIR/uploads_$DATE.tar.gz /var/www/riverdice/uploads/

# 7일 이상 된 백업 파일 삭제
find $BACKUP_DIR -name "*.sql" -mtime +7 -delete
find $BACKUP_DIR -name "*.tar.gz" -mtime +7 -delete

# 크론탭 설정 (매일 새벽 2시)
# 0 2 * * * /path/to/backup.sh
```

## 최종 검증 체크리스트

### 필수 구현 확인사항
- [x] **인증 시스템**: 회원가입, 로그인, 세션 관리
- [x] **게임 통합**: React 게임 iframe 임베딩
- [x] **가챠 시스템**: 확률 기반 뽑기 시스템
- [x] **커뮤니티**: 게시판, 댓글, 좋아요
- [x] **미디어 관리**: 파일/URL 업로드, YouTube/Vimeo 지원
- [x] **고객 지원**: FAQ, 문의사항, 실시간 채팅
- [x] **관리자 패널**: 모든 데이터 CRUD 관리
- [x] **반응형 디자인**: 모바일/태블릿/데스크톱 지원
- [x] **데이터베이스**: 15개 테이블, 정규화된 스키마
- [x] **API 시스템**: RESTful API, 에러 처리

### 코드 품질 확인
- [x] **모듈화**: 기능별 JavaScript 파일 분리
- [x] **클래스 구조**: 객체지향 프로그래밍 적용
- [x] **에러 처리**: Try-catch, 재시도 로직
- [x] **보안**: XSS 방지, SQL Injection 방지, 비밀번호 해싱
- [x] **성능**: 디바운싱, 지연 로딩, 메모리 관리
- [x] **접근성**: 키보드 네비게이션, 스크린 리더 지원

이제 누락된 주요 부분들이 모두 포함된 완전한 아키텍처 문서가 완성되었습니다. 이 문서를 바탕으로 전체 시스템을 완벽하게 구현할 수 있습니다.

## 문제 해결

### 일반적인 문제들

#### 서버 연결 오류
```bash
# 포트 충돌 확인
netstat -ano | findstr :3001
netstat -ano | findstr :3000

# 방화벽 설정 확인
# CORS 설정 확인
```

#### 데이터베이스 연결 오류
```bash
# MySQL 서비스 상태 확인
systemctl status mysql  # Linux
net start mysql         # Windows

# 환경 변수 확인
echo $DB_HOST $DB_USER $DB_NAME
```

#### 파일 업로드 실패
```bash
# 디렉토리 권한 확인
ls -la uploads/
chmod 755 uploads/media

# 파일 크기 제한 확인 (50MB)
# 서버 디스크 공간 확인
```

#### React 게임 로딩 실패
```bash
# React 서버 상태 확인
cd card-battle-battle
npm start

# 브라우저 개발자 도구 확인
# 네트워크 탭에서 에러 확인
```

### 디버깅 도구
```javascript
// 전역 디버깅 변수
window.debugMode = true;
window.mediaManager = mediaManagerInstance;
window.adminManager = adminManagerInstance;

// 콘솔 로그 활성화
if (window.debugMode) {
  console.log('Debug mode enabled');
}
```

## 결론

River Dice 게임 포털은 다음과 같은 완전한 기능을 제공합니다:

### 핵심 성과
- **58개 메서드**를 가진 미디어 관리 시스템
- **1,800줄**의 정교한 관리자 시스템
- **15개 테이블**의 정규화된 데이터베이스
- **완전한 사용자 인증** 시스템
- **React 게임 통합** 플랫폼
- **실시간 커뮤니티** 기능
- **전문적인 고객 지원** 시스템

### 기술적 특징
- Vanilla JavaScript 기반의 모듈화된 아키텍처
- 클래스 기반 객체지향 프로그래밍
- RESTful API 설계
- 반응형 웹 디자인
- 완전한 CRUD 작업 지원
- 파일 업로드 및 미디어 스트리밍
- 실시간 상호작용 시스템

이 문서를 기반으로 전체 시스템을 완벽하게 재구축할 수 있습니다.