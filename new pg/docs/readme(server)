# 게임 홈페이지 서버 README

## 프로젝트 개요
Express.js 기반의 게임 홈페이지 백엔드 서버로, 사용자 관리, 커뮤니티, 미디어 관리, 고객 지원 등의 기능을 제공합니다.

## 기술 스택
- **백엔드**: Node.js, Express.js
- **데이터베이스**: MySQL (mysql2)
- **인증**: bcrypt (비밀번호 해싱)
- **파일 업로드**: multer
- **보안**: cors
- **환경 변수**: dotenv

## 설치 및 실행

### 1. 패키지 설치
```bash
npm install express mysql2 bcrypt cors multer dotenv
```

### 2. 환경 변수 설정 (.env 파일)
```env
PORT=3001
DB_HOST=localhost
DB_USER=root
DB_PASSWORD=
DB_NAME=testgame
```

### 3. 디렉토리 구조
```
project/
├── server.js
├── index.html
├── admin.html
├── game-info.html
├── gacha-shop.html
├── community.html
├── media.html
├── customer-service.html
├── login.html
├── signup.html
├── profile.html
├── game.html
├── uploads/
│   └── media/
└── media/
```

### 4. 서버 실행
```bash
node server.js
```
서버는 기본적으로 http://localhost:3001에서 실행됩니다.

## 데이터베이스 스키마

### 사용자 관련 테이블
- **UserDB**: 사용자 기본 정보 (ID, nickname, email, password, gold, Owned_SkinID 등)
- **PlayerDB**: 플레이어 게임 데이터 (캐릭터, HP, ATK, 세션/스테이지 정보 등)

### 게임 데이터 테이블
- **CharacterDB**: 캐릭터 정보 (name, hp, atk, luck)
- **MonsterDB**: 몬스터 정보 (Session, Type, Element, HP/ATK 범위 등)
- **SkillDB**: 스킬 정보 (Job, Type, rarity, element, damage 등)

### 커뮤니티 테이블
- **Posts**: 게시글 (title, content, category, likes, views 등)
- **Comments**: 댓글 (post_id, user_id, content 등)
- **PostLikes**: 게시글 좋아요

### 미디어 테이블
- **MediaItems**: 미디어 파일 정보 (title, file_path, file_type, tags 등)
- **MediaCategories**: 미디어 카테고리
- **MediaComments**: 미디어 댓글
- **MediaLikes**: 미디어 좋아요
- **MediaDownloads**: 다운로드 로그

### 고객 지원 테이블
- **Inquiries**: 문의사항 (inquiry_type, title, content, status, response 등)
- **FAQ**: 자주 묻는 질문

### 뉴스 테이블
- **News**: 뉴스/공지사항
- **NewsCategories**: 뉴스 카테고리

## API 엔드포인트

### 기본 API
- `GET /` - 메인 페이지
- `GET /api/test` - API 테스트
- `GET /api/db-test` - DB 연결 테스트

### 관리자 API
**인증**: admin_id='admin', admin_password='1234'

#### 로그인
- `POST /api/admin/login`

#### 사용자 관리
- `GET /api/admin/users` - 전체 사용자 목록
- `PUT /api/admin/users/:id` - 사용자 정보 수정
- `DELETE /api/admin/users/:id` - 사용자 삭제

#### 게시글 관리
- `GET /api/admin/posts` - 전체 게시글 목록
- `PUT /api/admin/posts/:id` - 게시글 수정
- `DELETE /api/admin/posts/:id` - 게시글 삭제

#### 댓글 관리
- `GET /api/admin/comments` - 전체 댓글 목록
- `DELETE /api/admin/comments/:id` - 댓글 삭제

#### 미디어 관리
- `GET /api/admin/media` - 전체 미디어 목록
- `PUT /api/admin/media/:id` - 미디어 수정
- `DELETE /api/admin/media/:id` - 미디어 삭제

#### 뉴스 관리
- `GET /api/admin/news` - 뉴스 목록
- `POST /api/admin/news` - 뉴스 작성
- `PUT /api/admin/news/:id` - 뉴스 수정
- `DELETE /api/admin/news/:id` - 뉴스 삭제

#### 고객센터 관리
- `GET /api/admin/inquiries` - 전체 문의사항
- `PUT /api/admin/inquiries/:id` - 문의 상태/답변 변경
- `DELETE /api/admin/inquiries/:id` - 문의 삭제
- `GET /api/admin/faq` - FAQ 관리
- `POST /api/admin/faq` - FAQ 추가
- `PUT /api/admin/faq/:id` - FAQ 수정
- `DELETE /api/admin/faq/:id` - FAQ 삭제

#### 게임 데이터 관리
- `GET /api/admin/characters` - 캐릭터 목록
- `PUT /api/admin/characters/:name` - 캐릭터 수정
- `GET /api/admin/monsters` - 몬스터 목록
- `PUT /api/admin/monsters/:id` - 몬스터 수정
- `DELETE /api/admin/monsters/:id` - 몬스터 삭제
- `GET /api/admin/skills` - 스킬 목록
- `PUT /api/admin/skills/:id` - 스킬 수정

#### 통계
- `GET /api/admin/stats` - 전체 통계 데이터

### 사용자 API

#### 회원가입/로그인
```javascript
// 아이디 중복 체크
POST /api/check-id
Body: { "id": "user123" }

// 닉네임 중복 체크
POST /api/check-nickname
Body: { "nickname": "닉네임" }

// 회원가입
POST /api/signup
Body: {
  "id": "user123",
  "nickname": "닉네임",
  "email": "user@example.com",
  "password": "password123",
  "birthDate": "1990-01-01",
  "gender": "male"
}

// 로그인
POST /api/login
Body: {
  "email": "user@example.com",
  "password": "password123"
}
```

#### 사용자 정보
- `GET /api/users/:id` - 특정 사용자 정보 조회

### 게임 API
- `GET /api/characters` - 캐릭터 목록
- `GET /api/monsters/:session` - 세션별 몬스터 목록
- `GET /api/skills` - 스킬 목록

### 커뮤니티 API

#### 게시글
```javascript
// 게시글 목록 (페이징)
GET /api/posts?category=전체&page=1&limit=10

// 게시글 작성
POST /api/posts
Body: {
  "user_id": "user123",
  "category": "자유게시판",
  "title": "제목",
  "content": "내용"
}

// 특정 게시글 조회
GET /api/posts/:id

// 좋아요 토글
POST /api/posts/:id/like
Body: { "user_id": "user123" }

// 좋아요 상태 확인
GET /api/posts/:id/like/status?user_id=user123
```

#### 댓글
```javascript
// 댓글 목록
GET /api/posts/:id/comments

// 댓글 작성
POST /api/posts/:id/comments
Body: {
  "user_id": "user123",
  "content": "댓글 내용"
}
```

#### 통계
- `GET /api/posts/stats/categories` - 카테고리별 통계
- `GET /api/posts/popular?limit=5` - 인기 게시글

### 미디어 API

#### 조회
```javascript
// 카테고리 목록
GET /api/media/categories

// 미디어 아이템 목록
GET /api/media/items?category=screenshots&featured=true&limit=20&offset=0

// 특정 미디어 조회
GET /api/media/items/:id

// 사용자별 미디어
GET /api/media/user/:userId
```

#### 업로드
```javascript
// 파일 업로드
POST /api/media/upload
Content-Type: multipart/form-data
Fields: category_id, title, description, tags, media(file)

// URL로 업로드 (YouTube/Vimeo 지원)
POST /api/media/upload-url
Body: {
  "url": "https://youtube.com/watch?v=...",
  "category_id": 1,
  "title": "제목",
  "description": "설명",
  "tags": ["tag1", "tag2"],
  "user_id": "user123"
}
```

#### 상호작용
```javascript
// 좋아요 토글
POST /api/media/items/:id/like
Body: { "user_id": "user123" }

// 다운로드
GET /api/media/download/:id?user_id=user123

// 댓글 목록
GET /api/media/items/:id/comments

// 댓글 작성
POST /api/media/items/:id/comments
Body: {
  "user_id": "user123",
  "content": "댓글 내용"
}
```

#### 수정/삭제
```javascript
// 미디어 수정
PUT /api/media/items/:id
Body: {
  "title": "새 제목",
  "description": "새 설명",
  "tags": ["new_tag"],
  "user_id": "user123"
}

// 미디어 삭제
DELETE /api/media/items/:id
Body: { "user_id": "user123" }
```

### 고객 지원 API

#### 문의사항
```javascript
// 문의 작성
POST /api/inquiries
Body: {
  "user_id": "user123",
  "user_email": "user@example.com",
  "inquiry_type": "bug_report",
  "title": "버그 신고",
  "content": "상세 내용",
  "game_info": "추가 정보",
  "agreePrivacy": true
}

// 사용자 문의 내역
GET /api/inquiries/user/:userId
```

#### FAQ
```javascript
// FAQ 목록
GET /api/faq?category=general

// FAQ 조회수 증가
POST /api/faq/:id/view
```

## 파일 업로드 설정

### 지원 파일 형식
- **이미지**: JPEG, JPG, PNG, GIF
- **비디오**: MP4, WebM

### 업로드 제한
- 최대 파일 크기: 50MB
- 저장 경로: `uploads/media/`
- 파일명 형식: `timestamp_originalname`

### 외부 비디오 지원
- YouTube URL 자동 embed 변환
- Vimeo URL 자동 embed 변환

## 보안 설정

### 비밀번호 보안
```javascript
// 회원가입 시 bcrypt로 해싱 (saltRounds: 10)
const hashedPassword = await bcrypt.hash(password, 10);

// 로그인 시 비교
const isValidPassword = await bcrypt.compare(password, user.Password);
```

### 관리자 인증
```javascript
// 하드코딩된 관리자 계정 (운영 시 변경 필요)
admin_id: 'admin'
admin_password: '1234'
```

### CORS 설정
```javascript
app.use(cors()); // 모든 도메인 허용 (운영 시 제한 필요)
```

## 에러 처리

### 파일 업로드 에러
```javascript
// Multer 에러 처리
if (error instanceof multer.MulterError) {
  if (error.code === 'LIMIT_FILE_SIZE') {
    return res.status(400).json({ 
      error: '파일 크기가 너무 큽니다. (최대 50MB)' 
    });
  }
}
```

### 전역 에러 처리
```javascript
// 처리되지 않은 예외
process.on('uncaughtException', (err) => {
  console.error('처리되지 않은 예외:', err);
  process.exit(1);
});

// 처리되지 않은 Promise 거부
process.on('unhandledRejection', (reason, promise) => {
  console.error('처리되지 않은 Promise 거부:', reason);
  process.exit(1);
});
```

## 주요 특징

### 1. 다중 사용자 시스템
- 회원가입/로그인
- 사용자별 게임 데이터 관리
- 권한 기반 접근 제어

### 2. 완전한 커뮤니티 기능
- 게시글 작성/수정/삭제
- 댓글 시스템
- 좋아요 기능
- 카테고리별 분류

### 3. 미디어 관리 시스템
- 파일 업로드/다운로드
- YouTube/Vimeo 임베드
- 태그 시스템
- 조회수/다운로드 통계

### 4. 고객 지원 시스템
- 문의사항 접수/관리
- FAQ 시스템
- 상태별 문의 분류

### 5. 관리자 패널
- 모든 데이터 관리
- 통계 대시보드
- 사용자/콘텐츠 모니터링

## 운영 시 주의사항

### 1. 보안 강화 필요
```javascript
// 관리자 계정 변경
const ADMIN_ID = process.env.ADMIN_ID;
const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD;

// CORS 제한
app.use(cors({
  origin: ['https://yourdomain.com'],
  credentials: true
}));

// JWT 토큰 기반 인증 도입 권장
```

### 2. 데이터베이스 최적화
- 인덱스 추가
- 쿼리 최적화
- 커넥션 풀 설정

### 3. 파일 저장소
- AWS S3 같은 클라우드 스토리지 사용 권장
- CDN 도입으로 성능 향상

### 4. 로깅 시스템
```javascript
// Winston 등의 로깅 라이브러리 도입
const winston = require('winston');
```

### 5. 환경별 설정 분리
```javascript
// config 폴더 생성하여 환경별 설정 관리
config/
├── development.js
├── production.js
└── test.js
```

## 테스트

### API 테스트
```bash
# API 연결 테스트
curl http://localhost:3001/api/test

# DB 연결 테스트
curl http://localhost:3001/api/db-test
```

### 회원가입 테스트
```bash
curl -X POST http://localhost:3001/api/signup \
  -H "Content-Type: application/json" \
  -d '{
    "id": "testuser",
    "nickname": "테스트",
    "email": "test@example.com",
    "password": "password123"
  }'
```

## 누락되기 쉬운 중요 사항들

### 1. 데이터베이스 외래키 관계
```sql
-- PlayerDB.Player_ID → UserDB.ID
-- Comments.user_id → UserDB.ID
-- Posts.user_id → UserDB.ID
-- MediaItems.uploaded_by → UserDB.ID
-- Inquiries.user_id → UserDB.ID

-- 사용자 삭제 시 PlayerDB를 먼저 삭제해야 함
DELETE FROM PlayerDB WHERE Player_ID = ?;
DELETE FROM UserDB WHERE ID = ?;
```

### 2. 미들웨어 설정 순서
```javascript
// 순서가 중요함
app.use(cors());
app.use(express.json());
app.use('/uploads', express.static('uploads'));
app.use(express.urlencoded({ extended: true }));
app.use(express.static(__dirname));
app.use('/media', express.static(path.join(__dirname, 'media')));
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));
```

### 3. 인코딩 처리
```javascript
// 한글 파일명 처리
filename: function (req, file, cb) {
  const timestamp = Date.now();
  const originalName = Buffer.from(file.originalname, 'latin1').toString('utf8');
  cb(null, `${timestamp}_${originalName}`);
}

// URL 디코딩
app.put('/api/admin/characters/:name', (req, res) => {
  const { name } = req.params;
  // decodeURIComponent(name) 사용 필요
});
```

### 4. 404 처리
```javascript
// 모든 라우트 마지막에 위치해야 함
app.use((req, res) => {
  res.status(404).sendFile(path.join(__dirname, 'index.html'));
});
```

### 5. 업로드 디렉토리 자동 생성
```javascript
const uploadDir = path.join(__dirname, 'uploads/media');
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir, { recursive: true });
}
```

### 6. Promise 병렬 처리
```javascript
// 통계 데이터 조회 시 Promise.all 사용
Promise.all([
  new Promise((resolve, reject) => {
    db.query(queries.users, (err, results) => {
      if (err) reject(err);
      else resolve({ users: results[0].count });
    });
  }),
  // ... 다른 쿼리들
]).then(results => {
  const stats = Object.assign({}, ...results);
  res.json(stats);
});
```

## 확장 가능성 및 추가 고려사항

### 1. 실시간 기능 확장
- Socket.io를 활용한 실시간 채팅
- 실시간 알림 시스템
- 실시간 게임 상태 동기화

### 2. 게임 연동 확장
- 게임 서버와의 WebSocket 연동
- 실시간 랭킹 시스템
- 게임 내 아이템 거래 시스템

### 3. 모바일 앱 지원
- REST API 기반으로 모바일 앱 개발 가능
- JWT 토큰 기반 인증으로 확장
- Push 알림 시스템

### 4. 성능 최적화 방안
```javascript
// Redis 캐싱 도입
const redis = require('redis');
const client = redis.createClient();

// 데이터베이스 커넥션 풀
const pool = mysql.createPool({
  connectionLimit: 10,
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  acquireTimeout: 60000,
  timeout: 60000
});
```

### 5. 보안 강화 로드맵
```javascript
// Rate Limiting
const rateLimit = require('express-rate-limit');
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15분
  max: 100 // 최대 100회 요청
});

// JWT 토큰 기반 인증
const jwt = require('jsonwebtoken');

// 입력 값 검증
const { body, validationResult } = require('express-validator');

// SQL Injection 방지 (이미 mysql2의 prepared statement 사용중)
// XSS 방지
const xss = require('xss');
```

## 데이터베이스 완전 스키마 (추론)

### 누락될 수 있는 테이블들
```sql
-- 이미 언급된 테이블 외에 필요할 수 있는 테이블들
CREATE TABLE IF NOT EXISTS PostLikes (
  user_id VARCHAR(255),
  post_id INT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (user_id, post_id)
);

CREATE TABLE IF NOT EXISTS MediaLikes (
  user_id VARCHAR(255),
  media_id INT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (user_id, media_id)
);

CREATE TABLE IF NOT EXISTS MediaDownloads (
  download_id INT AUTO_INCREMENT PRIMARY KEY,
  media_id INT,
  user_id VARCHAR(255),
  ip_address VARCHAR(45),
  user_agent TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

이제 README가 완전해졌습니다. 누락된 부분들을 모두 포함했습니다.