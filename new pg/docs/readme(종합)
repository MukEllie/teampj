# Game Portal 웹사이트 프로젝트

## 프로젝트 개요
React 게임을 통합한 종합 게임 포털 웹사이트입니다. 사용자 인증, 가챠 시스템, 뉴스 관리, 커뮤니티 기능을 포함한 완전한 게임 포털 솔루션을 제공합니다.

## 주요 기능

### 1. 사용자 인증 시스템
- **회원가입/로그인**: 이메일 기반 인증
- **실시간 중복 검사**: 아이디/닉네임 중복 확인
- **비밀번호 강도 체크**: 실시간 보안 수준 표시
- **자동 로그인 유지**: localStorage 기반 세션 관리
- **소셜 로그인 준비**: Google, 카카오 로그인 인터페이스

### 2. 게임 플레이 시스템
- **React 게임 통합**: iframe을 통한 React 앱 임베딩
- **자동 로딩 관리**: 게임 로드 상태 및 에러 처리
- **반응형 게임 화면**: 모바일/데스크톱 최적화

### 3. 가챠 상점 시스템
- **다중 가챠 타입**: 캐릭터, 무기, 특별 가챠
- **확률 시스템**: 등급별 상세 확률 표시
- **이벤트 배너**: 시간 제한 이벤트 및 픽업 시스템
- **실시간 획득 로그**: 다른 플레이어 획득 현황

### 4. 뉴스 관리 시스템
- **카테고리별 필터링**: 공지사항, 업데이트, 이벤트 등
- **중요 공지 우선표시**: 핀고정 및 하이라이트
- **페이지네이션**: 효율적인 콘텐츠 탐색
- **조회수 추적**: 자동 조회수 증가

### 5. 프로필 관리
- **개인정보 관리**: 기본 정보 및 게임 데이터
- **게임 통계**: 보유 골드, 스킨, 레벨 등
- **실시간 업데이트**: 게임 진행 상황 동기화

## 파일 구조

```
게임포털/
├── index.html              # 메인 홈페이지
├── game.html              # 게임 실행 페이지
├── login.html             # 로그인 페이지
├── signup.html            # 회원가입 페이지
├── profile.html           # 사용자 프로필
├── gacha-shop.html        # 가챠 상점
├── game-info.html         # 게임 정보
├── news.html              # 공지사항
├── styles.css             # 메인 스타일시트
└── common-auth.js         # 공통 인증 시스템
```

## 핵심 컴포넌트 상세

### common-auth.js (인증 시스템)
```javascript
// 주요 기능
- updateAuthButtons()      // 헤더 인증 버튼 동적 업데이트
- getCurrentUser()         // 현재 로그인 사용자 정보 반환
- requireLogin()           // 로그인 필수 페이지 보호
- onLoginSuccess()         // 로그인 성공 시 처리
- logout()                 // 로그아웃 처리
```

### 인증 흐름
1. **회원가입**: 실시간 유효성 검사 → 서버 전송 → localStorage 저장
2. **로그인**: 이메일/비밀번호 검증 → 토큰 저장 → 헤더 업데이트
3. **세션 관리**: 페이지 이동 시 자동 인증 상태 확인

### 게임 통합 (game.html)
```javascript
// React 게임 로딩 관리
- 로딩 스피너 표시
- 5초 타임아웃 에러 처리
- 자동 재시도 메커니즘 (최대 3회)
- 개발 서버 연결 상태 확인
```

### 가챠 시스템 (gacha-shop.html)
```javascript
// 가챠 카테고리
- 캐릭터 가챠: 픽업 이벤트 포함
- 무기 가챠: 신화급 장비
- 특별 가챠: 한정 이벤트

// 확률 시스템
- 전설급(5성): 1.5% (픽업 시 3%)
- 영웅급(4성): 8.5%
- 희귀급(3성): 40%
- 일반급(2성): 50%
```

## API 엔드포인트

### 인증 관련
- `POST /api/login` - 로그인
- `POST /api/signup` - 회원가입
- `POST /api/check-id` - 아이디 중복 확인
- `POST /api/check-nickname` - 닉네임 중복 확인

### 뉴스 관리
- `GET /api/admin/news` - 뉴스 목록 조회
- `POST /api/admin/news/{id}/view` - 조회수 증가

## 기술 스택

### 프론트엔드
- **HTML5**: 시맨틱 마크업
- **CSS3**: Flexbox, Grid, 애니메이션
- **JavaScript (ES6+)**: 모듈화, async/await
- **반응형 디자인**: 모바일 우선 설계

### 스타일링 특징
- **그라디언트 배경**: 게이밍 느낌의 시각적 효과
- **카드 기반 레이아웃**: 콘텐츠 구조화
- **호버 애니메이션**: 인터랙티브 피드백
- **다크/라이트 테마**: 일관된 컬러 시스템

### 데이터 저장
- **localStorage**: 사용자 세션, 설정
- **서버 연동**: RESTful API 통신

## 설치 및 실행

### 1. 프로젝트 설정
```bash
# 프로젝트 폴더 생성
mkdir game-portal
cd game-portal

# 파일들 배치
# 모든 HTML, CSS, JS 파일을 루트 디렉토리에 복사
```

### 2. React 게임 서버 준비
```bash
# React 개발 서버가 포트 3000에서 실행되어야 함
npm start
# 또는
yarn start
```

### 3. 웹 서버 실행
```bash
# 라이브 서버 사용 (VS Code 확장)
Live Server 확장 설치 후 index.html 우클릭 → "Open with Live Server"

# 또는 Node.js 서버
npx http-server . -p 8080

# 또는 Python 서버
python -m http.server 8000
```

### 4. 백엔드 API 서버 (선택사항)
```javascript
// 실제 API가 없는 경우 목업 데이터로 동작
// 회원가입/로그인은 localStorage로 시뮬레이션
```

## 사용 방법

### 1. 기본 탐색
- **홈페이지**: 게임 실행 및 주요 기능 접근
- **게임 실행**: 중앙의 "게임 실행" 버튼 클릭
- **네비게이션**: 상단 메뉴로 각 섹션 이동

### 2. 사용자 계정
```javascript
// 회원가입
1. 상단 "회원가입" 클릭
2. 필수 정보 입력 (아이디, 이메일, 비밀번호 등)
3. 중복 확인 버튼으로 유효성 검사
4. 약관 동의 후 가입 완료

// 로그인
1. 상단 "로그인" 클릭
2. 이메일/비밀번호 입력
3. "로그인 상태 유지" 체크 (선택)
4. 로그인 성공 시 자동 메인페이지 이동
```

### 3. 게임 플레이
```javascript
// 게임 실행 과정
1. 메인페이지에서 "게임 실행" 버튼 클릭
2. 자동으로 game.html로 이동
3. React 서버 연결 및 로딩
4. 게임 플레이 시작
```

### 4. 가챠 시스템 이용
```javascript
// 가챠 이용 방법
1. 상단 메뉴 "가챠샵" 클릭
2. 원하는 가챠 카테고리 선택
3. 1회 또는 11회 뽑기 선택
4. 다이아몬드 소모하여 아이템 획득
```

## 커스터마이징 가이드

### 1. 색상 테마 변경
```css
/* styles.css에서 주요 색상 변수 수정 */
:root {
  --primary-color: #667eea;     /* 메인 컬러 */
  --secondary-color: #764ba2;   /* 보조 컬러 */
  --accent-color: #f093fb;      /* 강조 컬러 */
  --background-color: #f8f9fa;  /* 배경 컬러 */
}
```

### 2. 게임 서버 URL 변경
```javascript
// game.html에서 iframe src 수정
gameFrame.src = "http://your-game-server:port";
```

### 3. 가챠 확률 조정
```javascript
// gacha-shop.html의 확률 테이블 수정
const probabilities = {
  legendary: 1.5,  // 전설급 확률
  epic: 8.5,       // 영웅급 확률
  rare: 40,        // 희귀급 확률
  common: 50       // 일반급 확률
};
```

### 4. 새로운 페이지 추가
```html
<!-- 1. 새 HTML 파일 생성 -->
<!DOCTYPE html>
<html lang="ko">
<head>
    <!-- 기본 헤더 복사 -->
    <script src="common-auth.js"></script>
</head>
<body>
    <!-- 헤더 네비게이션 복사 -->
    <!-- 새로운 콘텐츠 추가 -->
    <!-- 푸터 복사 -->
</body>
</html>

<!-- 2. 네비게이션 메뉴에 링크 추가 -->
<li class="nav-item">
    <a href="new-page.html" class="nav-link">새 페이지</a>
</li>
```

## 문제 해결

### 1. 게임이 로드되지 않는 경우
```javascript
// 확인 사항
1. React 개발 서버가 포트 3000에서 실행 중인지 확인
2. CORS 설정 확인
3. 브라우저 콘솔에서 에러 메시지 확인
4. 네트워크 탭에서 요청 상태 확인
```

### 2. 로그인이 안 되는 경우
```javascript
// 해결 방법
1. localStorage 초기화: localStorage.clear()
2. 브라우저 쿠키 삭제
3. 개발자 도구에서 네트워크 요청 확인
4. API 서버 상태 확인
```

### 3. 모바일에서 레이아웃 깨짐
```css
/* 반응형 CSS 추가 확인 */
@media (max-width: 768px) {
  .your-element {
    /* 모바일 스타일 추가 */
  }
}
```

### 4. 한글 인코딩 문제
```html
<!-- HTML 파일 상단에 charset 확인 -->
<meta charset="UTF-8">
```

## 보안 고려사항

### 1. 클라이언트 사이드 보안
```javascript
// 입력값 검증
function validateInput(input) {
  return input.replace(/[<>]/g, ''); // XSS 방지
}

// 민감 정보 처리
// 비밀번호는 평문 저장 금지
// API 키는 환경변수로 관리
```

### 2. 세션 관리
```javascript
// 세션 만료 처리
function checkSessionExpiry() {
  const loginTime = localStorage.getItem('loginTime');
  const currentTime = Date.now();
  const sessionDuration = 24 * 60 * 60 * 1000; // 24시간
  
  if (currentTime - loginTime > sessionDuration) {
    logout();
  }
}
```

## 확장 가능성

### 1. 실시간 기능
- WebSocket 연결로 실시간 가챠 결과 공유
- 라이브 채팅 시스템
- 실시간 알림

### 2. 게임 기능 확장
- 인벤토리 시스템
- 친구 시스템
- 길드 시스템
- PvP 매칭

### 3. 관리자 기능
- 어드민 대시보드
- 사용자 관리
- 콘텐츠 관리
- 통계 분석

## 추가 중요 사항들

### 특수 기능들

#### 1. 멀티탭 동기화 (common-auth.js)
```javascript
// storage 이벤트로 여러 탭 간 로그인 상태 동기화
window.addEventListener('storage', function(e) {
    if (e.key === 'currentUser') {
        updateAuthButtons();
    }
});
```

#### 2. 게임 로딩 시스템 (game.html)
```javascript
// 정교한 에러 처리 및 재시도 메커니즘
- 5초 로딩 타임아웃
- 최대 3회 자동 재시도
- 로딩 스피너 및 에러 화면
- React 서버 연결 상태 체크
```

#### 3. 실시간 입력 검증 (signup.html)
```javascript
// 사용자 경험 최적화
- 입력 시마다 즉시 검증
- 비밀번호 강도 실시간 표시
- 중복 검사 결과 즉시 피드백
- 에러 메시지 동적 표시/제거
```

#### 4. 가챠 시스템 시각적 효과
```javascript
// 버튼 클릭 애니메이션
gachaBtns.forEach(btn => {
    btn.addEventListener('click', function() {
        this.style.transform = 'scale(0.95)';
        setTimeout(() => {
            this.style.transform = '';
            // 가챠 실행
        }, 150);
    });
});
```

### 데이터 구조

#### localStorage 저장 구조
```javascript
// currentUser 객체 구조
{
    id: "사용자아이디",
    nickname: "닉네임", 
    email: "이메일",
    birthDate: "생년월일",
    gender: "성별",
    joinDate: "가입날짜",
    gold: 45800,           // 보유 골드
    ownedSkins: [],        // 보유 스킨 배열
    playerData: {          // 게임 데이터
        Using_Character: "사용중인캐릭터",
        WhereStage: "현재스테이지레벨"
    }
}

// rememberUser: 로그인 유지용 이메일 저장
```

#### 뉴스 데이터 구조
```javascript
// 뉴스 API 응답 구조
{
    news_id: 1,
    title: "제목",
    content: "HTML 내용",
    category_id: "1-5",
    is_important: true,     // 중요 공지 여부
    is_published: true,     // 발행 여부
    views: 1234,           // 조회수
    created_at: "날짜"
}
```

### 성능 최적화 요소

#### 1. 이미지 최적화
```html
<!-- 플레이스홀더 이미지 대신 아이콘 사용 -->
<div class="game-image-placeholder">
    <span class="placeholder-icon">🎮</span>
</div>
```

#### 2. CSS 최적화
```css
/* GPU 가속 애니메이션 */
.feature-card {
    will-change: transform;
    transform: translateZ(0);
}

/* 효율적인 선택자 사용 */
.news-item:hover {
    transform: translateY(-5px);
}
```

#### 3. JavaScript 최적화
```javascript
// 이벤트 위임 패턴 사용
document.addEventListener('DOMContentLoaded', function() {
    // DOM 로드 완료 후 이벤트 리스너 등록
});

// 디바운싱으로 성능 개선
let debounceTimer;
input.addEventListener('input', function() {
    clearTimeout(debounceTimer);
    debounceTimer = setTimeout(validateInput, 300);
});
```

이 프로젝트는 교육 및 포트폴리오 목적으로 제작되었습니다. 상업적 용도로 사용 시 관련 라이선스를 확인하시기 바랍니다.

### 사용된 기술 및 리소스
- CSS 애니메이션: 오픈소스 라이브러리 참조
- 아이콘: 유니코드 이모지 사용
- 폰트: 시스템 기본 폰트 사용

## 기여 방법

1. 이슈 등록을 통한 버그 리포트
2. 풀 리퀘스트를 통한 코드 개선
3. 문서화 개선 제안
4. 새로운 기능 아이디어 제안

## 연락처

프로젝트 관련 문의사항이나 기술 지원이 필요한 경우 이슈를 등록해 주시기 바랍니다.